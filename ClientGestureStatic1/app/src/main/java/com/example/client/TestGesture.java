 package com.example.client;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Reader;
import java.io.Serializable;
import java.lang.ClassNotFoundException;import java.lang.Exception;import java.lang.Object;import java.lang.String;import java.lang.StringBuilder;import java.lang.SuppressWarnings;import java.lang.System;import java.util.List;

import android.util.Log;
import com.example.client.Base64Coder;import be.ac.ulg.montefiore.run.jahmm.ForwardBackwardScaledCalculator;
import be.ac.ulg.montefiore.run.jahmm.Hmm;
import be.ac.ulg.montefiore.run.jahmm.ObservationVector;
import be.ac.ulg.montefiore.run.jahmm.OpdfMultiGaussianFactory;
import be.ac.ulg.montefiore.run.jahmm.io.ObservationSequencesReader;
import be.ac.ulg.montefiore.run.jahmm.io.ObservationVectorReader;
import be.ac.ulg.montefiore.run.jahmm.learn.KMeansLearner;
  
public class TestGesture {
	OpdfMultiGaussianFactory initFactoryPunch=null;
	Reader learnReaderPunch=null;
	List<List<ObservationVector>> learnSequencesPunch=null;
	KMeansLearner<ObservationVector> kMeansLearnerPunch=null;
	Hmm<ObservationVector> initHmmPunch=null;
	Hmm<ObservationVector> learntHmmPunch=null;
	Hmm<ObservationVector> learntHmmScrolldown=null;
	Hmm<ObservationVector> learntHmmSend=null;
	Hmm<ObservationVector> learntHmmupdown=null;
	 //String root = Environment.getExternalStorageDirectory().toString();
	String myDir = "./hmm";
	String gesture = null;
	   
public void	train() {
	 
	// Create HMM for punch gesture
	//Down Gesture
	 Log.i("in Training", "Train Started");
	 try{	
		 //gesture_latest = "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";
		 //gesture = "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";
		 gesture = "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";
		 learntHmmPunch = getHmmObject(gesture);
	 }
	 catch(Exception e){
		 e.printStackTrace();
	 }


    // Create HMM for scroll-down gesture
	 //Right Gesture
	 try{	//gesture_latest = "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";
		 //gesture = "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";
		gesture = "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";
		
		 learntHmmScrolldown= getHmmObject(gesture);
	 }
	 catch(Exception e){
		 e.printStackTrace();
	 }
    // Create HMM for send gesture
	 //Left Gesture
	 try{
		// gesture_latest = "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";
				 // gesture = "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";
		 gesture = "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"; 
		 
		 learntHmmSend= getHmmObject(gesture);
	 }
	 catch(Exception e){
		 e.printStackTrace();
	 }
	
	//Up Gesture
	 try{
		 //gesture_latest = "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";
	    // gesture = "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";
		 gesture = "rO0ABXNyACJiZS5hYy51bGcubW9udGVmaW9yZS5ydW4uamFobW0uSG1tAAAAAAAAAAICAANbAAFhdAADW1tETAAFb3BkZnN0ABVMamF2YS91dGlsL0FycmF5TGlzdDtbAAJwaXQAAltEeHB1cgADW1tEx60L/2Rn/0UCAAB4cAAAAAV1cgACW0Q+powUq2NaHgIAAHhwAAAABT/v+mx6DR5DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP0ZOF8uG8rp1cQB+AAcAAAAFAAAAAAAAAAA/5haxrqSDeT+3vm4JWdISPgBR0Ne1U5Y/y8YCP7vsKXVxAH4ABwAAAAUAAAAAAAAAAD+mhohX7wdbP+nHoqeZfcg/wz/TS55HEwAAAAAAAAAAdXEAfgAHAAAABQAAAAAAAAAAP8VPkxHEJXM+zcETPB+MyD/qrBPLSieaAAAAAAAAAAB1cQB+AAcAAAAFP9Q+tE78M/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/5eCl2IHmC3NyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAFdwQAAAAFc3IAMGJlLmFjLnVsZy5tb250ZWZpb3JlLnJ1bi5qYWhtbS5PcGRmTXVsdGlHYXVzc2lhbgAAAAAAAAABAgABTAAMZGlzdHJpYnV0aW9udABCTGJlL2FjL3VsZy9tb250ZWZpb3JlL3J1bi9kaXN0cmlidXRpb25zL011bHRpR2F1c3NpYW5EaXN0cmlidXRpb247eHBzcgBAYmUuYWMudWxnLm1vbnRlZmlvcmUucnVuLmRpc3RyaWJ1dGlvbnMuTXVsdGlHYXVzc2lhbkRpc3RyaWJ1dGlvbt4odFG68SMJAgAGRAANY292YXJpYW5jZURldEkACWRpbWVuc2lvblsACmNvdmFyaWFuY2VxAH4AAVsADWNvdmFyaWFuY2VJbnZxAH4AAVsAC2NvdmFyaWFuY2VMcQB+AAFbAARtZWFucQB+AAN4cAAAAAAAAAAAAAAAA3VxAH4ABQAAAAN1cQB+AAcAAAADP+IWVAwhx2E/tce9DlTSTD+/fLy9E1CXdXEAfgAHAAAAAz+1x70OVNJMP+PAIWVZs06/xrvz3PJaUHVxAH4ABwAAAAM/v3y8vRNQl7/Gu/Pc8lpQP/ACzTF9EShwcHVxAH4ABwAAAAO/v7ZqN2AVXb/+3x1KqIkgwAI1wilGWDZzcQB+AA9zcQB+ABIAAAAAAAAAAAAAAAN1cQB+AAUAAAADdXEAfgAHAAAAAz/c8IGzPqnZv2BI1gV9k+i/xuONiwoy7nVxAH4ABwAAAAO/YEjWBX2T6D/QWNaYAbKLv6PTHuESWEx1cQB+AAcAAAADv8bjjYsKMu6/o9Me4RJYTD/pkjnbBx5jcHB1cQB+AAcAAAADv7idzGS0RB4/6c7y3jAl4j/p/NPvXlt0c3EAfgAPc3EAfgASAAAAAAAAAAAAAAADdXEAfgAFAAAAA3VxAH4ABwAAAAM/tkcKaYOQ1r9zMHhinjIfP5f7ty6soYV1cQB+AAcAAAADv3MweGKeMh8/wwFzH2zfKL+RynDy/fBIdXEAfgAHAAAAAz+X+7curKGFv5HKcPL98Eg/wM+xJkDHEHBwdXEAfgAHAAAAA7+sxxUr3g8lP/4H/I+4OEo/4A2QMoZyFXNxAH4AD3NxAH4AEgAAAAAAAAAAAAAAA3VxAH4ABQAAAAN1cQB+AAcAAAADP+GFNViMkGe/tAZfl/3HNz/fvbImYXkgdXEAfgAHAAAAA7+0Bl+X/cc3P8aMtXk99go/oW/cp7h+GnVxAH4ABwAAAAM/372yJmF5ID+hb9ynuH4aP/Kiz2f1MopwcHVxAH4ABwAAAAM/xjhwiwaNI0AFlDDik+WzP+xUyCtxe5dzcQB+AA9zcQB+ABIAAAAAAAAAAAAAAAN1cQB+AAUAAAADdXEAfgAHAAAAAz/hJmmB9oXqP6osYf0XTTy/wAQzy/QZUnVxAH4ABwAAAAM/qixh/RdNPD/NPCKHPmxiP8NzxQypeU91cQB+AAcAAAADv8AEM8v0GVI/w3PFDKl5Tz/lcXVAzza/cHB1cQB+AAcAAAADv9VgnN7m1B+/8BJt4wJmkr/I62u7mW4leHVxAH4ABwAAAAUAAAAAAAAAAD/bKAxKEagXP9+S8ksdILc/tRQFq0Tc6AAAAAAAAAAA";
		 learntHmmupdown = getHmmObject(gesture);
	 }
	 catch(Exception e){
		 e.printStackTrace();
	 }
	}
	
 
	public String test(File seqfilename) throws Exception{
        Reader testReader = new FileReader(seqfilename);
        List<List<ObservationVector>> testSequences = ObservationSequencesReader
                .readSequences(new ObservationVectorReader(), testReader);
        testReader.close();
        List<ObservationVector> tseq = testSequences.get(0);
        
        //ForwardBackwardScaledCalculator fbsc = new ForwardBackwardScaledCalculator(test_pair.getValue(),model_pair.getValue().get_hmm());
         //System.out.println(fbsc.lnProbability());
        ForwardBackwardScaledCalculator fbc ;
        short gesture = 0; // punch = 1, scrolldown = 2, send = 3
        double punchProbability, scrolldownProbability, sendProbability,updownProbability;
        fbc = new ForwardBackwardScaledCalculator(tseq,learntHmmPunch);
        punchProbability = fbc.lnProbability();
        
        Log.d("Gesture", "Down : " + fbc.lnProbability());
        
        fbc = new ForwardBackwardScaledCalculator(tseq,learntHmmScrolldown);
        scrolldownProbability = fbc.lnProbability();
        
        Log.d("Gesture", "Right : " + fbc.lnProbability());
        
        
        fbc = new ForwardBackwardScaledCalculator(tseq,learntHmmSend);
        sendProbability = fbc.lnProbability();
        
        Log.d("Gesture", "Left : " + fbc.lnProbability());
        
        fbc = new ForwardBackwardScaledCalculator(tseq,learntHmmupdown);
        updownProbability = fbc.lnProbability();
        
        Log.d("Gesture", "Up : " + fbc.lnProbability());
        
        if ( punchProbability > scrolldownProbability && punchProbability > sendProbability && punchProbability > updownProbability) {
            gesture = 1;
        }
        
        if (scrolldownProbability > punchProbability && scrolldownProbability > sendProbability && scrolldownProbability > updownProbability) {
            gesture = 2;
        }
        
        
       if (sendProbability > punchProbability && sendProbability > scrolldownProbability && sendProbability > updownProbability)
       {
    	   gesture = 3;
       }
        //System.out.println(punchProbability +","+scrolldownProbability +","+sendProbability);
       
       if (updownProbability > punchProbability && updownProbability > scrolldownProbability && updownProbability > sendProbability)
       {
    	   gesture =4;
       }
        
        Log.i("probabilities", punchProbability + "   " + sendProbability  + "   " + scrolldownProbability+"   "+updownProbability);
        if (gesture == 1) {
        	System.out.println("This is an up gesture");
        	return "up";
        } else if (gesture == 2) {
            System.out.println("This is a right gesture");
        	return "right";
        } else if (gesture == 3) {
        	System.out.println("This is a left gesture");
        	return "left";
        }else if (gesture == 4){
        	System.out.println("This is a down gesture");
        	return "down";
        }else{
        	return "others";
        	
        }
        
        //double punchProbability, scrolldownProbability, sendProbability,updownProbability;
        /*for (int i = 0; i < testSequences.size(); i++) {
            Log.d("Gesture", testSequences.get(i)+"");
            //punchProbability = this.learntHmmPunch.probability(testSequences.get(i));
            fbc =new ForwardBackwardScaledCalculator(testSequences,learntHmmPunch);
            punchProbability = 
            scrolldownProbability = this.learntHmmScrolldown.probability(testSequences
                    .get(i));
            
            Log.d("Gesture", this.learntHmmScrolldown.probability(testSequences
                    .get(i))+"");
            
            sendProbability = this.learntHmmSend.probability(testSequences
                    .get(i));
            Log.d("Gesture", this.learntHmmSend.probability(testSequences
                    .get(i))+"");
            
            updownProbability = this.learntHmmupdown.probability(testSequences.get(i));
            Log.d("Gesture", this.learntHmmupdown.probability(testSequences
                    .get(i))+"");
            Log.i("Test", "Success");
            Log.d("Down Probability", punchProbability+"");
            
            if ( punchProbability > scrolldownProbability && punchProbability > sendProbability && punchProbability > updownProbability) {
                gesture = 1;
            }
            
            if (scrolldownProbability > punchProbability && scrolldownProbability > sendProbability && scrolldownProbability > updownProbability) {
                gesture = 2;
            }
            
            
           if (sendProbability > punchProbability && sendProbability > scrolldownProbability && sendProbability > updownProbability)
           {
        	   gesture = 3;
           }
            //System.out.println(punchProbability +","+scrolldownProbability +","+sendProbability);
           
           if (updownProbability > punchProbability && updownProbability > scrolldownProbability && updownProbability > sendProbability)
           {
        	   gesture =4;
           }
            
            Log.i("probabilities", punchProbability + "   " + sendProbability  + "   " + scrolldownProbability+"   "+updownProbability);
            if (gesture == 1) {
            	System.out.println("This is an up gesture");
            	return "up";
            } else if (gesture == 2) {
                System.out.println("This is a right gesture");
            	return "right";
            } else if (gesture == 3) {
            	System.out.println("This is a left gesture");
            	return "left";
            }else if (gesture == 4){
            	System.out.println("This is a down gesture");
            	return "down";
            }else{
            	return "others";
            	
            }
            }
            */
        
		//return "others";
    }
    
	private String toString(Serializable o) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(o);
        oos.close();
        return new String(Base64Coder.encode(baos.toByteArray()));
    }

    private Object fromString(String s) throws IOException,
            ClassNotFoundException {
        byte[] data = Base64Coder.decode(s);
        ObjectInputStream ois = new ObjectInputStream(
                new ByteArrayInputStream(data));
        Object o = ois.readObject();
        ois.close();
        return o;
    }
    
    @SuppressWarnings("unchecked")
	public Hmm<ObservationVector> getHmmObject(String gesture) throws ClassNotFoundException, IOException
    {
    	String result=null;
    	StringBuilder sb = new StringBuilder(gesture);
    	result = sb.toString();
    	return (Hmm<ObservationVector>) fromString(result);
    }
} 